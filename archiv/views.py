# generated by appcreator
from django.contrib.auth.decorators import login_required
from django.views.generic.detail import DetailView
from django.utils.decorators import method_decorator
from django.urls import reverse_lazy
from django.views.generic.edit import DeleteView
from django.views.generic.list import ListView
from django.views.generic.edit import CreateView, UpdateView

from . filters import (
    EventListFilter,
    ReferenceListFilter,
    WorkListFilter,
    PersonListFilter
)
from . forms import (
    EventForm, EventFilterFormHelper,
    ReferenceForm, ReferenceFilterFormHelper,
    WorkForm, WorkFilterFormHelper,
    PersonForm, PersonFilterFormHelper,
    PlaceForm, PlaceFilterFormHelper,
    InstitutionForm, InstitutionFilterFormHelper
)
from . tables import (
    EventTable,
    ReferenceTable,
    WorkTable,
    PersonTable,
    PlaceTable,
    InstitutionTable
)
from . models import (
    Event,
    Reference,
    Work,
    Person
)
from browsing.browsing_utils import (
    GenericListView, BaseCreateView, BaseUpdateView, BaseDetailView
)


class PersonListView(GenericListView):

    model = Person
    filter_class = PersonListFilter
    formhelper_class = PersonFilterFormHelper
    table_class = PersonTable
    init_columns = [
        'id', 'title',
    ]
    enable_merge = True


class PersonDetailView(BaseDetailView):

    model = Person
    template_name = 'archiv/generic_detail.html'


class PersonCreate(BaseCreateView):

    model = Person
    form_class = PersonForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(PersonCreate, self).dispatch(*args, **kwargs)


class PersonUpdate(BaseUpdateView):

    model = Person
    form_class = PersonForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(PersonUpdate, self).dispatch(*args, **kwargs)


class PersonDelete(DeleteView):
    model = Person
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:person_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(PersonDelete, self).dispatch(*args, **kwargs)


class EventListView(GenericListView):

    model = Event
    filter_class = EventListFilter
    formhelper_class = EventFilterFormHelper
    table_class = EventTable
    init_columns = [
        'id', 'order_code',
    ]
    enable_merge = False


class EventDetailView(BaseDetailView):

    model = Event
    template_name = 'archiv/generic_detail.html'


class EventCreate(BaseCreateView):

    model = Event
    form_class = EventForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(EventCreate, self).dispatch(*args, **kwargs)


class EventUpdate(BaseUpdateView):

    model = Event
    form_class = EventForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(EventUpdate, self).dispatch(*args, **kwargs)


class EventDelete(DeleteView):
    model = Event
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:event_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(EventDelete, self).dispatch(*args, **kwargs)


class ReferenceListView(GenericListView):

    model = Reference
    filter_class = ReferenceListFilter
    formhelper_class = ReferenceFilterFormHelper
    table_class = ReferenceTable
    init_columns = [
        'id', 'id',
    ]
    enable_merge = False


class ReferenceDetailView(BaseDetailView):

    model = Reference
    template_name = 'archiv/generic_detail.html'


class ReferenceCreate(BaseCreateView):

    model = Reference
    form_class = ReferenceForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ReferenceCreate, self).dispatch(*args, **kwargs)


class ReferenceUpdate(BaseUpdateView):

    model = Reference
    form_class = ReferenceForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ReferenceUpdate, self).dispatch(*args, **kwargs)


class ReferenceDelete(DeleteView):
    model = Reference
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:reference_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ReferenceDelete, self).dispatch(*args, **kwargs)


class WorkListView(GenericListView):

    model = Work
    filter_class = WorkListFilter
    formhelper_class = WorkFilterFormHelper
    table_class = WorkTable
    init_columns = [
        'id', 'order_code',
    ]
    enable_merge = False


class WorkDetailView(BaseDetailView):

    model = Work
    template_name = 'archiv/generic_detail.html'


class WorkCreate(BaseCreateView):

    model = Work
    form_class = WorkForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(WorkCreate, self).dispatch(*args, **kwargs)


class WorkUpdate(BaseUpdateView):

    model = Work
    form_class = WorkForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(WorkUpdate, self).dispatch(*args, **kwargs)


class WorkDelete(DeleteView):
    model = Work
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:work_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(WorkDelete, self).dispatch(*args, **kwargs)
