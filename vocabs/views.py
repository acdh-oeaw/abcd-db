# generated by appcreator
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.urls import reverse_lazy
from django.views.generic.edit import DeleteView

from browsing.browsing_utils import (
    GenericListView, BaseCreateView, BaseUpdateView, BaseDetailView
)

from . models import (
    SkosCollection,
    SkosConcept,
    SkosTechnicalCollection
)
from . tables import (
    SkosCollectionTable,
    SkosConceptTable,
    SkosTechnicalCollectionTable
)
from . forms import (
    SkosCollectionForm, SkosCollectionFilterFormHelper,
    SkosConceptForm, SkosConceptFilterFormHelper,
    SkosTechnicalCollectionForm, SkosTechnicalCollectionFilterFormHelper
)
from . filters import (
    SkosCollectionListFilter,
    SkosConceptListFilter,
    SkosTechnicalCollectionListFilter
)


class SkosConceptListView(GenericListView):

    model = SkosConcept
    filter_class = SkosConceptListFilter
    formhelper_class = SkosConceptFilterFormHelper
    table_class = SkosConceptTable
    init_columns = [
        'id', 'pref_label', 'collection',
    ]
    enable_merge = False
    template_name = 'archiv/custom_list.html'


class SkosConceptDetailView(BaseDetailView):

    model = SkosConcept
    template_name = 'archiv/generic_detail.html'


class SkosConceptCreate(BaseCreateView):

    model = SkosConcept
    form_class = SkosConceptForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(SkosConceptCreate, self).dispatch(*args, **kwargs)


class SkosConceptUpdate(BaseUpdateView):

    model = SkosConcept
    form_class = SkosConceptForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(SkosConceptUpdate, self).dispatch(*args, **kwargs)


class SkosConceptDelete(DeleteView):
    model = SkosConcept
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('vocabs:SkosConcept_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(SkosConceptDelete, self).dispatch(*args, **kwargs)


class SkosCollectionListView(GenericListView):

    model = SkosCollection
    filter_class = SkosCollectionListFilter
    formhelper_class = SkosCollectionFilterFormHelper
    table_class = SkosCollectionTable
    init_columns = [
        'id', 'pref_label',
    ]
    enable_merge = False


class SkosCollectionDetailView(BaseDetailView):

    model = SkosCollection
    template_name = 'archiv/generic_detail.html'


class SkosCollectionCreate(BaseCreateView):

    model = SkosCollection
    form_class = SkosCollectionForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(SkosCollectionCreate, self).dispatch(*args, **kwargs)


class SkosCollectionUpdate(BaseUpdateView):

    model = SkosCollection
    form_class = SkosCollectionForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(SkosCollectionUpdate, self).dispatch(*args, **kwargs)


class SkosCollectionDelete(DeleteView):
    model = SkosCollection
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('vocabs:skoscollection_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(SkosCollectionDelete, self).dispatch(*args, **kwargs)


class SkosTechnicalCollectionListView(GenericListView):

    model = SkosTechnicalCollection
    filter_class = SkosTechnicalCollectionListFilter
    formhelper_class = SkosTechnicalCollectionFilterFormHelper
    table_class = SkosTechnicalCollectionTable
    init_columns = [
        'id', 'pref_label',
    ]
    enable_merge = False


class SkosTechnicalCollectionDetailView(BaseDetailView):

    model = SkosTechnicalCollection
    template_name = 'archiv/generic_detail.html'


class SkosTechnicalCollectionCreate(BaseCreateView):

    model = SkosTechnicalCollection
    form_class = SkosTechnicalCollectionForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(SkosTechnicalCollectionCreate, self).dispatch(*args, **kwargs)


class SkosTechnicalCollectionUpdate(BaseUpdateView):

    model = SkosTechnicalCollection
    form_class = SkosTechnicalCollectionForm
    template_name = 'archiv/generic_create.html'

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(SkosTechnicalCollectionUpdate, self).dispatch(*args, **kwargs)


class SkosTechnicalCollectionDelete(DeleteView):
    model = SkosTechnicalCollection
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('vocabs:skosTechnicalcollection_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(SkosTechnicalCollectionDelete, self).dispatch(*args, **kwargs)
